{"ast":null,"code":"import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n  return function detectCycles(chain, nextLink) {\n    const audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n    const {\n      outputs\n    } = getAudioNodeConnections(audioNode);\n    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n  };\n};","map":{"version":3,"names":["isAudioNode","isDelayNode","createDetectCycles","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","detectCycles","chain","nextLink","audioNode","includes","outputs","Array","from","map","outputConnection","reduce","mergedCycles","nestedCycles","concat"],"sources":["../../../src/factories/detect-cycles.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,WAAW,QAAQ,sBAAsB;AAIlD,OAAO,MAAMC,kBAAkB,GAAyBA,CAACC,wBAAwB,EAAEC,uBAAuB,EAAEC,cAAc,KAAI;EAC1H,OAAO,SAASC,YAAYA,CAAqBC,KAAsB,EAAEC,QAAqC;IAC1G,MAAMC,SAAS,GAAGT,WAAW,CAACQ,QAAQ,CAAC,GAAGA,QAAQ,GAAkBH,cAAc,CAACF,wBAAwB,EAAEK,QAAQ,CAAC;IAEtH,IAAIP,WAAW,CAACQ,SAAS,CAAC,EAAE;MACxB,OAAO,EAAE;IACb;IAEA,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MACxB,OAAO,CAACF,KAAK,CAAC;IAClB;IAEA,IAAIA,KAAK,CAACG,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC3B,OAAO,EAAE;IACb;IAEA,MAAM;MAAEE;IAAO,CAAE,GAAGP,uBAAuB,CAACK,SAAS,CAAC;IAEtD,OAAOG,KAAK,CAACC,IAAI,CAACF,OAAO,CAAC,CACrBG,GAAG,CAAEC,gBAAgB,IAAKT,YAAY,CAAC,CAAC,GAAGC,KAAK,EAAEE,SAAS,CAAC,EAAEM,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CACnFC,MAAM,CAAC,CAACC,YAAY,EAAEC,YAAY,KAAKD,YAAY,CAACE,MAAM,CAACD,YAAY,CAAC,EAAE,EAAE,CAAC;EACtF,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}