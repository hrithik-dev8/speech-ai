{"ast":null,"code":"export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n  return false;\n};","map":{"version":3,"names":["createIsSupportedPromise","cacheTestResult","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testConvolverNodeChannelCountSupport","testDomExceptionContrucorSupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","results","Promise","all","every","result"],"sources":["../../../src/factories/is-supported-promise.ts"],"sourcesContent":[null],"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAA+B,MAAAA,CAChEC,eAAe,EACfC,gDAAgD,EAChDC,kCAAkC,EAClCC,qDAAqD,EACrDC,8BAA8B,EAC9BC,iCAAiC,EACjCC,yCAAyC,EACzCC,wCAAwC,EACxCC,+CAA+C,EAC/CC,6CAA6C,EAC7CC,oCAAoC,EACpCC,gCAAgC,EAChCC,0BAA0B,EAC1BC,iEAAiE,EACjEC,uCAAuC,EACvCC,wBAAwB,KACxB;EACA,IACIf,eAAe,CAACC,gDAAgD,EAAEA,gDAAgD,CAAC,IACnHD,eAAe,CAACE,kCAAkC,EAAEA,kCAAkC,CAAC,IACvFF,eAAe,CAACI,8BAA8B,EAAEA,8BAA8B,CAAC,IAC/EJ,eAAe,CAACK,iCAAiC,EAAEA,iCAAiC,CAAC,IACrFL,eAAe,CAACO,wCAAwC,EAAEA,wCAAwC,CAAC,IACnGP,eAAe,CAACQ,+CAA+C,EAAEA,+CAA+C,CAAC,IACjHR,eAAe,CAACS,6CAA6C,EAAEA,6CAA6C,CAAC,IAC7GT,eAAe,CAACU,oCAAoC,EAAEA,oCAAoC,CAAC,IAC3FV,eAAe,CAACW,gCAAgC,EAAEA,gCAAgC,CAAC,IACnFX,eAAe,CAACY,0BAA0B,EAAEA,0BAA0B,CAAC,IACvEZ,eAAe,CACXa,iEAAiE,EACjEA,iEAAiE,CACpE,EACH;IACE,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC9BlB,eAAe,CAACG,qDAAqD,EAAEA,qDAAqD,CAAC,EAC7HH,eAAe,CAACM,yCAAyC,EAAEA,yCAAyC,CAAC,EACrGN,eAAe,CAACc,uCAAuC,EAAEA,uCAAuC,CAAC,EACjGd,eAAe,CAACe,wBAAwB,EAAEA,wBAAwB,CAAC,CACtE,CAAC;IAEF,OAAOC,OAAO,CAACG,KAAK,CAAEC,MAAM,IAAKA,MAAM,CAAC;EAC5C;EAEA,OAAO,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}